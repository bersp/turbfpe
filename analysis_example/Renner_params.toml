[routine]
part0_preanalysis = [
  "compute_and_write_data_stats",
  "compute_and_write_general_autovalues",
]

part1_turbulence_analysis = [
  "compute_turbulence_analysis_autovalues",
  "plot_stationary",
  "plot_pdf",
  "plot_spectrum",
]

part2_markov = [
  "compute_markov_autovalues",
  "compute_wilcoxon_test",
  "plot_wilcoxon_test",
  "compute_conditional_moments_estimation",
  "compute_km_coeffs_estimation",
  "plot_km_coeffs_estimation",
  "compute_km_coeffs_estimation_stp_opti",
  "plot_km_coeffs_estimation_opti",
  "compute_km_coeffs_fit",
  "plot_km_coeffs_fit",
]

part3_entropy = [
  "compute_entropy_autovalues",

  "compute_entropy_stp_opti",
  "plot_entropy_stp_opti",

  "compute_km_coeffs_ift_opti",
  "compute_entropy_ift_opti",
  "plot_entropy_ift_opti",
]

[data]
io.path             = "./Renner_8000Hz_filter.npy"  # str.
prop_to_use         = 1.0                           # float (0.0 to 1.0) or [float, float].
opts.norm_data      = true                          # bool.
opts.flip_data      = true                          # bool.
shape               = "!auto"                       # str.

[config.io]
processed_data_save_path = "processed_data/"  # str.
figures_save_path        = "figures/"         # str.
save_filenames_prefix    = "Renner"                     # str.

[config.mpl]
usetex             = true   # bool.
constrained_layout = true   # bool.
show_figures       = false  # bool.
save_figures       = true   # bool.

[data.stats]  # read-only
mean     = "!auto"
rms      = "!auto"
std      = "!auto"
skew     = "!auto"
kurtosis = "!auto"
range    = "!auto"

[general]
fs             = 8000.0   # float.
highest_freq   = 1800.0   # float or auto.
int_scale      = 0.0672   # float or auto.
taylor_scale   = 0.0066   # float.
taylor_hyp_vel = 2.25     # float.
nbins          = "!auto"  # int or auto.

# – PART 1: Turbulence analysis
[p1.plot_stationary]
  # uses -> data and
  data_split_percent = 5  # float (0 to 100).

[p1.plot_pdf]
  # uses -> data and
  nbins = "!auto"  # int or auto.

[p1.plot_spectrum]
  # uses -> data, general.fs, general.int_scale, general.taylor_scale and
  comp_exponent        = "-5/3"  # str (castable to float).
  moving_average_nbins = 3000    # int, auto or null.

# – PART 2: Markov
[p2.general]
  markov_scale_us = "!auto"  # int or auto.
  nbins           = 150      # int or auto.
  min_events      = 400      # int.

[p2.compute_wilcoxon_test]
  # uses -> data, general.fs, general.taylor_hyp_vel and
  nbins        = 150      # int or auto.
  indep_scale  = "!auto"  # float or auto.
  end_scale    = "!auto"  # float or auto.
  n_interv_sec = 1        # int.

  # writes -> wilcoxon_test.npy.

[p2.plot_wilcoxon_test]
  # uses -> wilcoxon_test.npy, p2.general.markov_scale_us.

[p2.compute_conditional_moments_estimation]
  # uses -> p2.general.markov_scale_us, p2.general.nbins, p2.general.min_events,
  #         general.fs, general.highest_freq, general.taylor_scale, general.taylor_hyp_vel and
  n_scale_steps = 9  # int.

  # writes -> conditional_moments_estimation.npz, density_functions.npz.

[p2.compute_km_coeffs_estimation]
  # uses -> conditional_moments_estimation.npz, density_functions.npz,
  #         p2.general.markov_scale_us, p2.general.nbins, p2.general.min_events,
  #         general.fs, general.taylor_scale, general.taylor_hyp_vel.

  # writes -> km_coeffs_estimation.npz (except D1_opti and D2_opti).

[p2.plot_km_coeffs_estimation]
  # uses -> density_functions.npz, km_coeffs_estimation.npz,
  #         general.taylor_scale.

[p2.compute_km_coeffs_estimation_stp_opti]
  # uses -> km_coeffs_estimation.npz, p2.general.nbins,
  #         general.fs, general.taylor_scale, general.taylor_hyp_vel and
  tol = 0.1                     # float (0.0 to 1.0).

  # writes -> km_coeffs_estimation.npz (only D1_opti and D2_opti).

[p2.plot_km_coeffs_estimation_opti]
  # uses -> km_coeffs_estimation.npz, density_functions.npz and
  #         p2.general.markov_scale_us, p2.general.nbins,
  #         general.taylor_scale, general.taylor_hyp_vel.

[p2.compute_km_coeffs_fit]
  # uses -> km_coeffs_estimation.npz, density_functions.npz and
  #         p2.general.nbins, general.taylor_scale.

  # writes -> km_coeffs_stp_opti.npz, km_coeffs_no_opti.npz.

[p2.plot_km_coeffs_fit]
  # uses -> km_coeffs_estimation.npz, density_functions.npz, km_coeffs_stp_opti.npz,
  #         p2.general.nbins, general.taylor_scale.

# – PART 3: Entropy
[p3.general]
  prop_to_use             = 1.0      # float (0.0 to 1.0) or [float, float].
  smallest_scale          = "!auto"  # float or auto.
  largest_scale           = "!auto"  # float or auto.
  scale_subsample_step_us = "!auto"  # int or auto.
  overlap_trajs_flag      = true     # bool.
  available_ram_gb        = 4.0      # float.

[p3.compute_km_coeffs_ift_opti]
  # uses -> km_coeffs_stp_opti.npz, km_coeffs_estimation.npz (only to get the scales),
  #         p3.general.smallest_scale, p3.general.largest_scale,
  #         p3.general.scale_subsample_step_us, p3.general.available_ram_gb,
  #         general.fs, general.taylor_scale, general.taylor_hyp_vel and
  tol_D1    = 0.1  # float.
  tol_D2    = 0.1  # float.
  iter_max  = 5    # int.

[p3.compute_entropy]
  # uses -> km_coeffs_(stp|ift)_opti.npz and
  #         p3.general.smallest_scale, p3.general.largest_scale,
  #         p3.general.scale_subsample_step_us, p3.general.overlap_trajs_flag,
  #         p3.available_ram_gb and
  #         general.fs, general.taylor_scale, general.taylor_hyp_vel.

  # writes -> entropies_(stp|ift)_opti.npy.

[p3.plot_entropy_stp_opti]
  # uses -> entropies_stp_opti.npy and
  nbins = 300  # int.

[p3.plot_entropy_ift_opti]
  # uses -> entropies_ift_opti.npy and
  nbins = 300  # int.
